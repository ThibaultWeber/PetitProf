#!/usr/bin/env python3
"""
Script de v√©rification pour la configuration Render
V√©rifie que tous les fichiers n√©cessaires sont pr√©sents et corrects
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """V√©rifie qu'un fichier existe et affiche le statut"""
    exists = os.path.exists(file_path)
    status = "‚úÖ" if exists else "‚ùå"
    print(f"{status} {description}: {file_path}")
    return exists

def check_render_config():
    """V√©rifie la configuration Render"""
    print("üîç V√©rification de la configuration Render...")
    print("=" * 50)
    
    required_files = [
        ("_render.yaml", "Configuration Render"),
        ("render-build.sh", "Script de build Render"),
        ("_redirects", "Fichier de redirections"),
        ("index.html", "Page d'accueil"),
        ("css/consolidated.css", "CSS principal"),
        ("js/script.js", "JavaScript principal"),
        ("nav.html", "Navigation"),
        ("footer.html", "Pied de page")
    ]
    
    all_good = True
    for file_path, description in required_files:
        if not check_file_exists(file_path, description):
            all_good = False
    
    return all_good

def check_directory_structure():
    """V√©rifie la structure des dossiers"""
    print("\nüìÅ V√©rification de la structure des dossiers...")
    print("=" * 50)
    
    required_dirs = [
        ("css", "Dossier CSS"),
        ("js", "Dossier JavaScript"),
        ("images", "Dossier Images"),
        ("documents", "Dossier Documents")
    ]
    
    all_good = True
    for dir_path, description in required_dirs:
        if os.path.isdir(dir_path):
            print(f"‚úÖ {description}: {dir_path}")
            # Compter les fichiers dans le dossier
            file_count = len([f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))])
            print(f"   üìÑ {file_count} fichiers trouv√©s")
        else:
            print(f"‚ùå {description}: {dir_path}")
            all_good = False
    
    return all_good

def check_html_files():
    """V√©rifie les fichiers HTML principaux"""
    print("\nüìÑ V√©rification des pages HTML...")
    print("=" * 50)
    
    html_files = [
        "calculatrice-graphique.html",
        "cours-en-ligne-page.html",
        "cours-particuliers-page.html",
        "contact-page.html",
        "youtube-page.html",
        "seconde.html",
        "premiere-es.html",
        "premiere-physique.html",
        "premiere-sti2d.html",
        "terminale-es.html",
        "terminale-physique.html",
        "terminale-sti2d.html"
    ]
    
    all_good = True
    for html_file in html_files:
        if not check_file_exists(html_file, f"Page {html_file}"):
            all_good = False
    
    return all_good

def check_images():
    """V√©rifie la pr√©sence des images importantes"""
    print("\nüñºÔ∏è V√©rification des images...")
    print("=" * 50)
    
    image_files = [
        "images/hero-maths.avif",
        "images/contact.avif",
        "images/cours-en-ligne.avif",
        "images/enseignant.webp",
        "images/equations.webp"
    ]
    
    all_good = True
    for image_file in image_files:
        if not check_file_exists(image_file, f"Image {image_file}"):
            all_good = False
    
    return all_good

def check_render_yaml():
    """V√©rifie la configuration Render YAML"""
    print("\nüîß V√©rification du fichier _render.yaml...")
    print("=" * 50)
    
    if not os.path.exists("_render.yaml"):
        print("‚ùå Fichier _render.yaml manquant")
        return False
    
    try:
        with open("_render.yaml", 'r', encoding='utf-8') as f:
            content = f.read()
            
        # V√©rifications basiques
        checks = [
            ("type: web", "Type de service"),
            ("name: petit-prof-site", "Nom du service"),
            ("env: static", "Environnement statique"),
            ("staticPublishPath: .", "Chemin de publication"),
            ("buildCommand:", "Commande de build"),
            ("startCommand:", "Commande de d√©marrage")
        ]
        
        all_good = True
        for check_text, description in checks:
            if check_text in content:
                print(f"‚úÖ {description}: {check_text}")
            else:
                print(f"‚ùå {description}: {check_text}")
                all_good = False
        
        return all_good
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du fichier: {e}")
        return False

def generate_deployment_instructions():
    """G√©n√®re les instructions de d√©ploiement Render"""
    print("\nüìã Instructions de d√©ploiement Render")
    print("=" * 50)
    
    instructions = """
1. Assurez-vous que votre d√©p√¥t GitHub est connect√© √† Render
2. Poussez ces modifications sur GitHub :
   git add .
   git commit -m "Configuration Render mise √† jour"
   git push origin main

3. Sur Render, v√©rifiez que le service est configur√© en "Static Site"
4. Le d√©ploiement se fera automatiquement apr√®s le push
5. V√©rifiez les logs de build dans l'interface Render

URL du site : https://petit-prof-site.onrender.com
"""
    print(instructions)

def main():
    """Fonction principale"""
    print("üöÄ V√©rification de la configuration Render")
    print("=" * 60)
    
    # V√©rifications
    render_ok = check_render_config()
    structure_ok = check_directory_structure()
    html_ok = check_html_files()
    images_ok = check_images()
    yaml_ok = check_render_yaml()
    
    # R√©sum√©
    print("\nüìä R√©sum√© des v√©rifications")
    print("=" * 50)
    
    all_checks = [render_ok, structure_ok, html_ok, images_ok, yaml_ok]
    passed = sum(all_checks)
    total = len(all_checks)
    
    print(f"‚úÖ V√©rifications r√©ussies : {passed}/{total}")
    
    if passed == total:
        print("\nüéâ Toutes les v√©rifications sont pass√©es !")
        print("Votre projet est pr√™t pour le d√©ploiement Render.")
        generate_deployment_instructions()
    else:
        print("\n‚ö†Ô∏è Certaines v√©rifications ont √©chou√©.")
        print("Veuillez corriger les probl√®mes avant de d√©ployer.")
        sys.exit(1)

if __name__ == "__main__":
    main()
